{
  "_args": [
    [
      {
        "raw": "jxon@git://github.com/petuomin/jxon.git",
        "scope": null,
        "escapedName": "jxon",
        "name": "jxon",
        "rawSpec": "git://github.com/petuomin/jxon.git",
        "spec": "git://github.com/petuomin/jxon.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:petuomin/jxon.git",
          "sshUrl": "git+ssh://git@github.com/petuomin/jxon.git",
          "httpsUrl": "git+https://github.com/petuomin/jxon.git",
          "gitUrl": "git://github.com/petuomin/jxon.git",
          "shortcut": "github:petuomin/jxon",
          "directUrl": "https://raw.githubusercontent.com/petuomin/jxon/master/package.json"
        }
      },
      "/home/pt/dev/kvp/deduplication/melinda-deduplication-common/node_modules/marc-record-serializers"
    ]
  ],
  "_from": "git://github.com/petuomin/jxon.git",
  "_id": "jxon@1.5.2",
  "_inCache": true,
  "_location": "/jxon",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jxon@git://github.com/petuomin/jxon.git",
    "scope": null,
    "escapedName": "jxon",
    "name": "jxon",
    "rawSpec": "git://github.com/petuomin/jxon.git",
    "spec": "git://github.com/petuomin/jxon.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:petuomin/jxon.git",
      "sshUrl": "git+ssh://git@github.com/petuomin/jxon.git",
      "httpsUrl": "git+https://github.com/petuomin/jxon.git",
      "gitUrl": "git://github.com/petuomin/jxon.git",
      "shortcut": "github:petuomin/jxon",
      "directUrl": "https://raw.githubusercontent.com/petuomin/jxon/master/package.json"
    }
  },
  "_requiredBy": [
    "/marc-record-serializers"
  ],
  "_resolved": "git://github.com/petuomin/jxon.git#2bf7e829cf67acb3656daaab1e485b4e83a88fb0",
  "_shasum": "08c22cc511c4736885062f0e4acf86f5e54cdc9a",
  "_shrinkwrap": null,
  "_spec": "jxon@git://github.com/petuomin/jxon.git",
  "_where": "/home/pt/dev/kvp/deduplication/melinda-deduplication-common/node_modules/marc-record-serializers",
  "author": {
    "name": "MDN",
    "url": "https://developer.mozilla.org/en-US/docs/JXON"
  },
  "bugs": {
    "url": "https://github.com/tyrasd/jxon/issues"
  },
  "contributors": [
    {
      "name": "Martin Raifer",
      "email": "tyr.asd@gmail.com"
    },
    {
      "name": "Igor Dimitrijevic",
      "email": "igor@ground.gr"
    }
  ],
  "dependencies": {
    "xmldom": "~0.1.17"
  },
  "description": "A complete, bidirectional, JXON library",
  "devDependencies": {
    "assert": "~1.3.0",
    "mocha": "~2.1.0"
  },
  "gitHead": "2bf7e829cf67acb3656daaab1e485b4e83a88fb0",
  "homepage": "https://github.com/tyrasd/jxon#readme",
  "keywords": [
    "jxon",
    "bidirectional",
    "loseless",
    "badgerfish",
    "parker convention",
    "xml to js",
    "xml2js",
    "xml to json",
    "xml2json",
    "js to xml",
    "js2xml",
    "json to xml",
    "json2xml"
  ],
  "license": "GPL v3",
  "main": "index.js",
  "name": "jxon",
  "optionalDependencies": {},
  "readme": "JXON\n====\n\nA complete, bidirectional, JXON (lossless JavaScript XML Object Notation) library. Works like nodejs module, AMD module or creates global window.JXON object.\n\nImplementation of Mozilla's [JXON](https://developer.mozilla.org/en-US/docs/JXON) code. Head over to MDN for [Documentation](https://developer.mozilla.org/en-US/docs/JXON#Usage).\n\n[![Build Status](https://secure.travis-ci.org/tyrasd/jxon.svg)](https://travis-ci.org/tyrasd/jxon)\n\nWithout changing the configuration, the library will work as original implementation.\n\n### JXON.config(cnf)\n**Overrides default configuration properties**\n- cnf - Object with configuration properties.\n\nExample:\n\n```js\nJXON.config({\n  valueKey: '_',                // default: 'keyValue'\n  attrKey: '$',                 // default: 'keyAttributes'\n  attrPrefix: '$',              // default: '@'\n  lowerCaseTags: false,         // default: true\n  trueIsEmpty: false,           // default: true\n  autoDate: false,              // default: true\n  ignorePrefixedNodes: false,   // default: true\n  parseValues: false            // default: true\n});\n```\n\nConversion example:\n\n```js\n{name: 'myportal'} \n<name>myportal</name>\n\n{user: {\n    username: 'testUser1',\n    password: 'yolo',\n    enabled: true\n}}\n<user>\n  <username>testUser1</username>\n  <password>yolo</password>\n  <enabled>true</enabled>\n</user>\n\n{tag: {\n    $type: 'regular'\n    $blacklist: false\n    _: 'Backbase'\n}}\n<tag type=\"regular\" blacklist=\"false\">Backbase</tag>\n\n{dogs: {\n    name: ['Charlie', {$nick: 'yes', _:'Mad Max'}]\n}}\n<dogs>\n    <name>Charlie</name>\n    <name nick=\"yes\">Mad Max</name>\n</dogs>\n```\n\n### JXON.stringToJs(xmlString)\n**Converts XML string to JS object.**\n- xmlString - XML string to convert to JXON notation JS object\n\n### JXON.jsToString(obj)\n**Converts JS object to XML string.**\n- obj - JS object in JXON notation to convert to XML string\n\n### JXON.build(xmlDocument, verbosity, freeze, nestedAttributes)\n**Converts XML document to JS object. _Alias: JXON.xmlToJs_**\n- xmlDocument - The XML document to be converted into JavaScript Object.\n- verbosity - Optional verbosity level of conversion, from 0 to 3. It is almost equivalent to our algorithms from #4 to #1 (default value is 1, which is equivalent to the algorithm #3).\n- freeze - Optional boolean expressing whether the created object must be freezed or not (default value is false).\n- nestedAttributes - Optional boolean expressing whether the the nodeAttributes must be nested into a child-object named keyAttributes or not (default value is false for verbosity levels from 0 to 2; true for verbosity level 3).\n \nExample:\n```js\nvar myObject = JXON.build(xmlDoc);\n```\n### JXON.unbuild(obj, namespaceURI, qualifiedNameStr, documentType)\n**Converts JS object to XML document. _Alias: JXON.jsToXml_**\n- obj - The JavaScript Object from which you want to create your XML Document.\n- namespaceURI - Optional DOMString containing the namespace URI of the document to be created, or null if the document doesn't belong to one.\n- qualifiedNameStr - Optional DOMString containing the qualified name, that is an optional prefix and colon plus the local root element name, of the document to be created.\n- documentType - Optional DocumentType of the document to be created. It defaults to null.\n \nExample:\n```js\nvar myObject = JXON.unbuild(myObject);\n```\n\n### JXON.stringToXml(xmlString)\n**Implementation of DOMParser.parseFromString, converts string to XML document.**\n- xmlString - XML string to convert to XML document\n\n### JXON.xmlToString(xmlObj)\n**Implementation of XMLSerializer.serializeToString, converts XML document to string.**\n- xmlObj - XML document to convert to XML string\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/tyrasd/jxon.git"
  },
  "scripts": {
    "pretest": "npm ls --depth=Infinity > /dev/null",
    "test": "./node_modules/mocha/bin/mocha test/test.js"
  },
  "version": "1.5.2"
}
