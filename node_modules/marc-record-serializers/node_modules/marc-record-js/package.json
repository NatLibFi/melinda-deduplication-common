{
  "_args": [
    [
      {
        "raw": "marc-record-js@git://github.com/petuomin/marc-record-js.git",
        "scope": null,
        "escapedName": "marc-record-js",
        "name": "marc-record-js",
        "rawSpec": "git://github.com/petuomin/marc-record-js.git",
        "spec": "git://github.com/petuomin/marc-record-js.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:petuomin/marc-record-js.git",
          "sshUrl": "git+ssh://git@github.com/petuomin/marc-record-js.git",
          "httpsUrl": "git+https://github.com/petuomin/marc-record-js.git",
          "gitUrl": "git://github.com/petuomin/marc-record-js.git",
          "shortcut": "github:petuomin/marc-record-js",
          "directUrl": "https://raw.githubusercontent.com/petuomin/marc-record-js/master/package.json"
        }
      },
      "/home/pt/dev/kvp/deduplication/melinda-deduplication-common/node_modules/marc-record-serializers"
    ]
  ],
  "_from": "git://github.com/petuomin/marc-record-js.git",
  "_id": "marc-record-js@0.3.2",
  "_inCache": true,
  "_location": "/marc-record-serializers/marc-record-js",
  "_phantomChildren": {},
  "_requested": {
    "raw": "marc-record-js@git://github.com/petuomin/marc-record-js.git",
    "scope": null,
    "escapedName": "marc-record-js",
    "name": "marc-record-js",
    "rawSpec": "git://github.com/petuomin/marc-record-js.git",
    "spec": "git://github.com/petuomin/marc-record-js.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:petuomin/marc-record-js.git",
      "sshUrl": "git+ssh://git@github.com/petuomin/marc-record-js.git",
      "httpsUrl": "git+https://github.com/petuomin/marc-record-js.git",
      "gitUrl": "git://github.com/petuomin/marc-record-js.git",
      "shortcut": "github:petuomin/marc-record-js",
      "directUrl": "https://raw.githubusercontent.com/petuomin/marc-record-js/master/package.json"
    }
  },
  "_requiredBy": [
    "/marc-record-serializers"
  ],
  "_resolved": "git://github.com/petuomin/marc-record-js.git#40ec9b043a9844632e2521621d3e9723e6e081d5",
  "_shasum": "1b31d4ba1f95e5507e300550d455a36f693d75d4",
  "_shrinkwrap": null,
  "_spec": "marc-record-js@git://github.com/petuomin/marc-record-js.git",
  "_where": "/home/pt/dev/kvp/deduplication/melinda-deduplication-common/node_modules/marc-record-serializers",
  "author": {
    "name": "Pasi Tuominen",
    "email": "pasi.tuominen@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/petuomin/marc-record-js/issues"
  },
  "dependencies": {},
  "description": "MARC record implementation in javascript",
  "devDependencies": {
    "chai": "^3.5.0",
    "eslint": "^3.8.1",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.2"
  },
  "gitHead": "40ec9b043a9844632e2521621d3e9723e6e081d5",
  "homepage": "https://github.com/petuomin/marc-record-js#readme",
  "license": "MIT",
  "main": "lib/MarcRecord.js",
  "name": "marc-record-js",
  "optionalDependencies": {},
  "readme": "# marc-record-js\n\n[![Build Status](https://travis-ci.org/petuomin/marc-record-js.svg?branch=master)](https://travis-ci.org/petuomin/marc-record-js)\n[![Code Climate](https://codeclimate.com/github/petuomin/marc-record-js/badges/gpa.svg)](https://codeclimate.com/github/petuomin/marc-record-js)\n[![Test Coverage](https://codeclimate.com/github/petuomin/marc-record-js/badges/coverage.svg)](https://codeclimate.com/github/petuomin/marc-record-js/coverage)\n\nMARC record implementation in javascript\n\n## Installation\n\n\n```\n\nnpm install marc-record-js\n\n```\n\n\n## Usage\n\nThe tests contains multiple examples on how to use the module.\n\n```\nvar Record = require('marc-record-js');\n```\n\n### Creating a record \n```\n// Create empty record\nvar myRecord = new Record();\n\n// You can also make a record from string representation\nvar myRecord = Record.fromString(recordString);\n\n```\n\nrecordString can be obtained with `toString()` function.\n```\nmyRecord.toString()\n```\nThe output of `toString()` is human-readable. Example:\n```\nLDR    leader\n001    28474\n100    ‡aExample Author\n245 0  ‡aExample Title\n500 #  ‡aNote‡bSecond subfield\n```\n\n### Mutating record\n```\n// set record leader\nmyRecord.setLeader(\"00000cam^a22001817i^4500\");\n\n// insert controlfields to the record. Proper ordering is handled automatically.\nmyRecord.insertControlField({\n\ttag: \"001\"\n\tvalue: \"007045872\"\n});\n\n// or using array as a parameter\nmyRecord.insertControlField([\"001\", \"007045872\"]});\n\n// There is also appendControlField, which will append a controlfield to the end of the record.\n\n// insert datafields to the record. Proper ordering is handled automatically.\nmyRecord.appendField({\n\ttag: \"245\",\n\tind1: \"\",\n\tind2: \"\",\n\tsubfields: [\n\t\t{\n\t\t\tcode: \"a\"\n\t\t\tvalue: \"The title of the book\"\n\t\t},\n\t\t{\n\t\t\tcode: \"c\",\n\t\t\tvalue: \"Some author\"\n\t\t}\n\t]\n});\n\n// or using array as a parameter\n// Format is [tag,ind1,ind2,sub1code,sub1value,sub2code,sub2value,...subNcode,subNvalue]\nmyRecord.insertField([\"245\",\"\",\"\", \"a\",\"The title of the book'\",\"b\",\"Some author\"]});\n```\n\n### Getters\n\nGet array of controlfields:\n```\nmyRecord.getControlfields();\n```\n\nGet array of datafields:\n```\nmyRecord.getDatafields();\n```\n\nRecord object has an attribute called `fields` which contains an array of it's fields:\n```\nmyRecord.fields\n```\n\nCheck if record is deleted:\n```\nmyRecord.isDeleted()\n```\n\n### Cloning a record\n\nA deep copy of the record can be made by passing the fields from a record to the constructor of new record:\n```\nvar deepClonedRecord = Record.clone(myRecord);\n```\n\n### Record equality check\n\n```\nRecord.isEqual(record1, record2); // true if records are deeply equal.\n```\n\nAlternative form for equality comparison:\n```\nrecord1.equalsTo(record2);\n```\n\n### Simple assertions\n\nCheck if record contains a data field with specific value\n```\nrecord.containsFieldWithValue('245', 'b', 'Test field', 'c', 'Test content')\n```\n\n\nCheck if record contains a control field with specific value\n```\nrecord.containsFieldWithValue('003', 'some value')\n```\n\n\n## See also\n\nTo serialize marc records to other formats, see [marc-record-serializers](https://github.com/petuomin/marc-record-serializers)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/petuomin/marc-record-js.git"
  },
  "scripts": {
    "coverage": "npm run test:unit --coverage",
    "enforce-coverage": "istanbul check-coverage --statement 100 --branch 100 --function 100 --line 100",
    "lint": "eslint --ext .js .",
    "test": "npm run lint && npm run coverage && npm run enforce-coverage",
    "test:unit": "istanbul test ./node_modules/.bin/_mocha",
    "test:unit:watch": "mocha -w"
  },
  "version": "0.3.2"
}
